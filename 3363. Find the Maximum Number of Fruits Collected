class Solution {
public:
vector<vector<int>> memo;
    int maxCollectedFruits(vector<vector<int>>& fruits) {
        n  = fruits.size();
        int total = 0;
        memo = vector<vector<int>> (n, vector<int> (n, -1));
        //child 1 will eat all diagonal fruits, so set then to 0
        for(int i = 0; i < n; i++){
            total += fruits[i][i];
            fruits[i][i] = 0;
        }
        //child 2
        total += dfs2(0, n - 1, fruits);
        //child 3
        total += dfs3(n - 1, 0, fruits);
        return total;
    }
private:
    int n;
    int dfs3(int row, int col, vector<vector<int>>& fruits){
        if(row < 0 or col < 0 or row >= n or col >= n)  return 0;
        
        if(memo[row][col] != -1)    return memo[row][col];

        int val = fruits[row][col];
        int res = 0;

        if(row == col)
            res = max(res, dfs3(row + 1, col + 1, fruits));
        else if(row - 1 == col){
            res = max({res,
                    dfs3(row + 1, col + 1, fruits),
                    dfs3(row, col + 1, fruits)}); 
        }
        else{
            res = max({res, dfs3(row + 1, col + 1, fruits),
                    dfs3(row, col + 1, fruits),
                    dfs3(row - 1, col + 1, fruits)});
        }
        return memo[row][col] = val + res;
    }
    int dfs2(int row, int col, vector<vector<int>>& fruits){
        if(row < 0 or col < 0 or row >= n or col >= n) return 0;

        if(memo[row][col] != -1)
            return memo[row][col];
        
        int val = fruits[row][col];
        int res = 0;

        if(row == col){
            res = max(res, dfs2(row + 1, col + 1, fruits));
        }
        else if(row == col - 1){
            res = max({res,
                    dfs2(row + 1, col + 1, fruits),
                    dfs2(row + 1, col, fruits)});
        }
        else{
            res = max({res,
                dfs2(row + 1, col + 1, fruits),
                dfs2(row + 1, col, fruits),
                dfs2(row + 1, col - 1, fruits)});
        }
        return memo[row][col] = val + res;
    }
};
